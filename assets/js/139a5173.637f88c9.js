"use strict";(globalThis.webpackChunk=globalThis.webpackChunk||[]).push([[64594],{56922:(e,t,n)=>{n.d(t,{Z:()=>r});var s=n(67294),i=n(15814);const r={React:s,...s,...i}},22329:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>h,frontMatter:()=>a,metadata:()=>d,toc:()=>u});var s=n(87462),i=(n(67294),n(3905)),r=n(95652),o=n(66466);const a={title:"Using a custom networking library",sidebar_label:"Custom networking library"},p=void 0,d={unversionedId:"guides/custom-networking",id:"version-5.0/guides/custom-networking",title:"Using a custom networking library",description:"Resource.fetch() wraps the standard fetch.",source:"@site/versioned_docs/version-5.0/guides/custom-networking.md",sourceDirName:"guides",slug:"/guides/custom-networking",permalink:"/docs/5.0/guides/custom-networking",editUrl:"https://github.com/coinbase/rest-hooks/edit/master/docs/guides/custom-networking.md",tags:[],version:"5.0",lastUpdatedBy:"Nathaniel Tucker",lastUpdatedAt:1631077272,formattedLastUpdatedAt:"9/8/2021",frontMatter:{title:"Using a custom networking library",sidebar_label:"Custom networking library"},sidebar:"version-5.0/docs",previous:{title:"Capturing Mutation Side-Effects",permalink:"/docs/5.0/guides/rpc"},next:{title:"Custom cache lifetime",permalink:"/docs/5.0/guides/resource-lifetime"}},c={},u=[{value:"Fetch (default)",id:"fetch-default",level:2},{value:"Superagent",id:"superagent",level:2},{value:"Axios",id:"axios",level:2}],l={toc:u};function h(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,s.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Resource.fetch()")," wraps the standard ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"},"fetch"),".\nOne key customization is ensuring every network related error thrown has a\nstatus member. This is useful in distinguishing code errors from networking errors,\nand is used in the ",(0,i.kt)("a",{parentName:"p",href:"../api/NetworkManager"},"NetworkManager"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"SimpleResource")," can be used as an abstract class to implement custom fetch methods\nwithout including the default."),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"If you plan on using ",(0,i.kt)("a",{parentName:"p",href:"../api/NetworkErrorBoundary"},"NetworkErrorBoundary")," make sure\nto add a ",(0,i.kt)("inlineCode",{parentName:"p"},"status")," member to errors, as it catches only errors with a ",(0,i.kt)("inlineCode",{parentName:"p"},"status")," member."))),(0,i.kt)("h2",{id:"fetch-default"},"Fetch (default)"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"},"Fetch")),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/github/fetch#installation"},"whatwg-fetch")," polyfill will be\nuseful in environments that don't support it, like node and older browsers\n(Internet Explorer). Be sure to include it in any bundles that need it."),(0,i.kt)("p",null,"This implementation is provided as a useful reference for building your own.\nFor the most up-to-date implementation, see the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/coinbase/rest-hooks/blob/master/packages/rest-hooks/src/resource/Resource.ts"},"source on master")),(0,i.kt)(r.Z,{className:"language-typescript",mdxType:"CodeBlock"},o.Z),(0,i.kt)("h2",{id:"superagent"},"Superagent"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"http://visionmedia.github.io/superagent/"},"Superagent")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { SimpleResource, Method } from '@rest-hooks/rest';\nimport type { SuperAgentRequest } from 'superagent';\n\nconst ResourceError = `JSON expected but not returned from API`;\n\n/**\n * Represents an entity to be retrieved from a server.\n * Typically 1:1 with a url endpoint.\n */\nexport default abstract class Resource extends SimpleResource {\n  /** A function to mutate all requests for fetch */\n  static fetchPlugin?: (request: SuperAgentRequest) => SuperAgentRequest;\n\n  /** Perform network request and resolve with json body */\n  static async fetch(\n    input: RequestInfo, init: RequestInit\n  ) {\n    let req = request[init.method](input).on('error', () => {});\n    if (this.fetchPlugin) req = req.use(this.fetchPlugin);\n    if (init.body) req = req.send(init.body);\n    return req.then(res => {\n      if (isInvalidResponse(res)) {\n        throw new Error(ResourceError);\n      }\n      return res.body;\n    });\n  }\n}\n\nexport const isInvalidResponse = (res: request.Response): boolean => {\n  // Empty is only valid when no response is expect (204)\n  const resEmptyIsExpected = res.text === '' && res.status === 204;\n  const resBodyEmpty = Object.keys(res.body).length === 0;\n  return !(res.type.includes('json') || resEmptyIsExpected) && resBodyEmpty;\n};\n")),(0,i.kt)("h2",{id:"axios"},"Axios"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/axios/axios"},"Axios")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { SimpleResource, Method } from '@rest-hooks/rest';\nimport axios from 'axios';\n\nexport default abstract class AxiosResource extends SimpleResource {\n  /** Perform network request and resolve with json body */\n  static async fetch(\n    input: RequestInfo, init: RequestInit\n  ) {\n    return await axios[init.method](input, init.body);\n  }\n}\n")))}h.isMDXComponent=!0},66466:(e,t,n)=>{n.d(t,{Z:()=>s});const s="import type {\n  SchemaDetail,\n  SchemaList,\n  AbstractInstanceType,\n} from '@rest-hooks/endpoint';\nimport { schema } from '@rest-hooks/endpoint';\n\nimport BaseResource from './BaseResource.js';\nimport type { RestEndpoint } from './types.js';\n\n/**\n * Represents an entity to be retrieved from a server.\n * Typically 1:1 with a url endpoint.\n * @see https://resthooks.io/docs/api/resource\n */\nexport default abstract class Resource extends BaseResource {\n  /** Endpoint to get a single entity */\n  static detail<T extends typeof Resource>(\n    this: T,\n  ): RestEndpoint<\n    (this: RestEndpoint, params: any) => Promise<any>,\n    SchemaDetail<AbstractInstanceType<T>>,\n    undefined\n  > {\n    const endpoint = this.endpoint();\n    return this.memo('#detail', () =>\n      endpoint.extend({\n        schema: this,\n      }),\n    );\n  }\n\n  /** Endpoint to get a list of entities */\n  static list<T extends typeof Resource>(\n    this: T,\n  ): RestEndpoint<\n    (this: RestEndpoint, params?: any) => Promise<any>,\n    SchemaList<AbstractInstanceType<T>>,\n    undefined\n  > {\n    const endpoint = this.endpoint();\n    return this.memo('#list', () =>\n      endpoint.extend({\n        schema: [this],\n        url: this.listUrl.bind(this),\n      }),\n    );\n  }\n\n  /** Endpoint to create a new entity (post) */\n  static create<T extends typeof Resource>(\n    this: T,\n  ): RestEndpoint<\n    (this: RestEndpoint, first: any, second?: any) => Promise<any>,\n    SchemaDetail<AbstractInstanceType<T>>,\n    true\n  > {\n    return this.memo('#create', () => {\n      const endpoint = this.endpointMutate();\n      const instanceFetch = this.fetch.bind(this);\n      return endpoint.extend({\n        fetch(...args) {\n          return instanceFetch(\n            this.url(...args),\n            this.getFetchInit(args[args.length - 1]),\n          );\n        },\n        url: (...args) => {\n          return args.length > 1 ? this.listUrl(args[0]) : this.listUrl();\n        },\n        schema: this,\n      });\n    });\n  }\n\n  /** Endpoint to update an existing entity (put) */\n  static update<T extends typeof Resource>(\n    this: T,\n  ): RestEndpoint<\n    (this: RestEndpoint, params: any, body: any) => Promise<any>,\n    SchemaDetail<AbstractInstanceType<T>>,\n    true\n  > {\n    const endpoint = this.endpointMutate();\n    return this.memo('#update', () =>\n      endpoint.extend({\n        method: 'PUT',\n        schema: this,\n      }),\n    );\n  }\n\n  /** Endpoint to update a subset of fields of an existing entity (patch) */\n  static partialUpdate<T extends typeof Resource>(\n    this: T,\n  ): RestEndpoint<\n    (this: RestEndpoint, params: any, body: any) => Promise<any>,\n    SchemaDetail<AbstractInstanceType<T>>,\n    true\n  > {\n    const endpoint = this.endpointMutate();\n    return this.memo('#partialUpdate', () =>\n      endpoint.extend({\n        method: 'PATCH',\n        schema: this,\n      }),\n    );\n  }\n\n  /** Endpoint to delete an entity (delete) */\n  static delete<T extends typeof Resource>(\n    this: T,\n  ): RestEndpoint<\n    (this: RestEndpoint, params: any) => Promise<any>,\n    schema.Delete<T>,\n    true\n  > {\n    const endpoint = this.endpointMutate();\n    return this.memo('#delete', () =>\n      endpoint.extend({\n        fetch(this: RestEndpoint, params: any) {\n          return endpoint.fetch\n            .call(this, params)\n            .then(res => (res && Object.keys(res).length ? res : params));\n        },\n        method: 'DELETE',\n        schema: new schema.Delete(this),\n      }),\n    );\n  }\n}\n"}}]);