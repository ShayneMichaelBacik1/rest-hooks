"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[10755],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),p=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(r),m=a,h=d["".concat(i,".").concat(m)]||d[m]||u[m]||o;return r?n.createElement(h,s(s({ref:t},c),{},{components:r})):n.createElement(h,s({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var p=2;p<o;p++)s[p]=r[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},58215:(e,t,r)=>{r.d(t,{Z:()=>a});var n=r(67294);const a=function(e){let{children:t,hidden:r,className:a}=e;return n.createElement("div",{role:"tabpanel",hidden:r,className:a},t)}},9877:(e,t,r)=>{r.d(t,{Z:()=>u});var n=r(87462),a=r(67294),o=r(72389),s=r(80944),l=r(53810),i=r(86010);const p="tabItem_1uMI";function c(e){var t,r;const{lazy:n,block:o,defaultValue:c,values:u,groupId:d,className:m}=e,h=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),k=u??h.map((e=>{let{props:{value:t,label:r}}=e;return{value:t,label:r}})),f=(0,l.lx)(k,((e,t)=>e.value===t.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const g=null===c?c:c??(null==(t=h.find((e=>e.props.default)))?void 0:t.props.value)??(null==(r=h[0])?void 0:r.props.value);if(null!==g&&!k.some((e=>e.value===g)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${g}" but none of its children has the corresponding value. Available values are: ${k.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:v}=(0,s.Z)(),[N,b]=(0,a.useState)(g),w=[],{blockElementScrollPositionUntilNextRender:E}=(0,l.o5)();if(null!=d){const e=y[d];null!=e&&e!==N&&k.some((t=>t.value===e))&&b(e)}const x=e=>{const t=e.currentTarget,r=w.indexOf(t),n=k[r].value;n!==N&&(E(t),b(n),null!=d&&v(d,n))},O=e=>{var t;let r=null;switch(e.key){case"ArrowRight":{const t=w.indexOf(e.currentTarget)+1;r=w[t]||w[0];break}case"ArrowLeft":{const t=w.indexOf(e.currentTarget)-1;r=w[t]||w[w.length-1];break}}null==(t=r)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":o},m)},k.map((e=>{let{value:t,label:r}=e;return a.createElement("li",{role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,className:(0,i.Z)("tabs__item",p,{"tabs__item--active":N===t}),key:t,ref:e=>w.push(e),onKeyDown:O,onFocus:x,onClick:x},r??t)}))),n?(0,a.cloneElement)(h.filter((e=>e.props.value===N))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},h.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function u(e){const t=(0,o.Z)();return a.createElement(c,(0,n.Z)({key:String(t)},e))}},80944:(e,t,r)=>{r.d(t,{Z:()=>o});var n=r(67294),a=r(79443);const o=function(){const e=(0,n.useContext)(a.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e}},32248:(e,t,r)=>{r.d(t,{Z:()=>s});var n=r(9877),a=r(58215),o=r(67294);function s(e){let{children:t}=e;return o.createElement(n.Z,{defaultValue:"before",groupId:"before-after",values:[{label:"before",value:"before"},{label:"after",value:"after"}]},o.createElement(a.Z,{value:"before"},t[0]),o.createElement(a.Z,{value:"after"},t[1]))}},94377:(e,t,r)=>{r.r(t),r.d(t,{frontMatter:()=>s,contentTitle:()=>l,metadata:()=>i,toc:()=>p,default:()=>u});var n=r(87462),a=(r(67294),r(3905)),o=r(32248);const s={title:"Upgrading from 5 to 6"},l="Highlights",i={unversionedId:"upgrade/upgrading-to-6",id:"version-5.0/upgrade/upgrading-to-6",title:"Upgrading from 5 to 6",description:"Deprecated networking definitions were removed from rest-hooks exports, and moved to @rest-hooks/legacy.",source:"@site/versioned_docs/version-5.0/upgrade/upgrading-to-6.md",sourceDirName:"upgrade",slug:"/upgrade/upgrading-to-6",permalink:"/docs/5.0/upgrade/upgrading-to-6",editUrl:"https://github.com/coinbase/rest-hooks/edit/master/docs/upgrade/upgrading-to-6.md",tags:[],version:"5.0",lastUpdatedBy:"Nathaniel Tucker",lastUpdatedAt:1630954311,formattedLastUpdatedAt:"9/6/2021",frontMatter:{title:"Upgrading from 5 to 6"}},p=[{value:"Deprecated networking definitions were removed from <code>rest-hooks</code> exports, and moved to @rest-hooks/legacy.",id:"deprecated-networking-definitions-were-removed-from-rest-hooks-exports-and-moved-to-rest-hookslegacy",children:[],level:2},{value:"@rest-hooks/endpoint changes",id:"rest-hooksendpoint-changes",children:[],level:2},{value:"@rest-hooks/rest changes from 2 -&gt; 3",id:"rest-hooksrest-changes-from-2---3",children:[],level:2},{value:"@rest-hooks/endpoint",id:"rest-hooksendpoint",children:[{value:"Entity",id:"entity",children:[],level:3}],level:2},{value:"@rest-hooks/rest",id:"rest-hooksrest",children:[],level:2},{value:"@rest-hooks/core",id:"rest-hookscore",children:[],level:2},{value:"rest-hooks",id:"rest-hooks",children:[],level:2},{value:"@rest-hooks/legacy",id:"rest-hookslegacy",children:[],level:2}],c={toc:p};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"highlights"},"Highlights"),(0,a.kt)("h2",{id:"deprecated-networking-definitions-were-removed-from-rest-hooks-exports-and-moved-to-rest-hookslegacy"},"Deprecated networking definitions were removed from ",(0,a.kt)("inlineCode",{parentName:"h2"},"rest-hooks")," exports, and moved to ",(0,a.kt)("a",{parentName:"h2",href:"https://www.npmjs.com/package/@rest-hooks/legacy"},"@rest-hooks/legacy"),"."),(0,a.kt)("p",null,"FlatEntity, SimpleRecord, NestedEntity, schemas, isEntity, Entity, Resource, SimpleResource, SchemaDetail, SchemaList, Method"),(0,a.kt)("p",null,"These are still supported! They are simply moved to ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@rest-hooks/legacy"},"@rest-hooks/legacy"),". This allows smooth incremental migrations."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"yarn add @rest-hooks/legacy@2.2.0"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"has all of these, and is compatible with both ",(0,a.kt)("inlineCode",{parentName:"li"},"rest-hooks")," 5 and 6.")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Upgrade ",(0,a.kt)("inlineCode",{parentName:"li"},"rest-hooks")," & ",(0,a.kt)("inlineCode",{parentName:"li"},"@rest-hooks/legacy")," to 6."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"https://resthooks.io/docs/upgrade/upgrading-to-5#rest-hooksrest"},"Gradually migrate")," to ",(0,a.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@rest-hooks/rest"},"@rest-hooks/rest"))),(0,a.kt)("h2",{id:"rest-hooksendpoint-changes"},"@rest-hooks/endpoint changes"),(0,a.kt)("details",null,(0,a.kt)("summary",null,"SimpleRecord -> [Object](https://resthooks.io/docs/api/Object)"),(0,a.kt)("p",null,"SimpleRecord was removed (though available in ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@rest-hooks/legacy"},"@rest-hooks/legacy"),")"),(0,a.kt)(o.Z,{mdxType:"BeforeAfterTabs"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export class Address extends SimpleRecord {\n  readonly street: string = '';\n  readonly suite: string = '';\n  readonly city: string = '';\n  readonly zipcode: string = '';\n  readonly createdAt: Date = new Date(0);\n\n  static schema = {\n    createdAt: Date,\n  };\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export const Address = {\n  street: '',\n  suite: '',\n  city: '',\n  zipcode: '',\n  date: Date,\n};\n")))),(0,a.kt)("h2",{id:"rest-hooksrest-changes-from-2---3"},"@rest-hooks/rest changes from 2 -> 3"),(0,a.kt)("p",null,"These add on to the ",(0,a.kt)("a",{parentName:"p",href:"https://resthooks.io/docs/upgrade/upgrading-to-5#rest-hooksrest"},"existing changes")," of @rest-hooks/rest from @rest-hooks/legacy"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"If ",(0,a.kt)("inlineCode",{parentName:"p"},"Resource.fromJS()")," was used to customize normalization process, use ",(0,a.kt)("inlineCode",{parentName:"p"},"process()")," instead."),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class MyResource extends Resource {\n  static process(input: any, parent: any, key: string | undefined): any {\n    return {\n      ...input,\n      extraThing: 5,\n    };\n  }\n}\n"))))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"New default ",(0,a.kt)("a",{parentName:"p",href:"#rest-hookscore"},"error behavior")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"To keep existing:",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class MyResource extends Resource {\n  static getEndpointExtra(): EndpointExtraOptions | undefined {\n    return {\n      errorPolicy: error => 'soft' as const,\n    };\n  }\n}\n")))))),(0,a.kt)("h1",{id:"full-list-of-changes"},"Full list of changes"),(0,a.kt)("h2",{id:"rest-hooksendpoint"},"@rest-hooks/endpoint"),(0,a.kt)("h3",{id:"entity"},"Entity"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"fromJS() -> process() to customize init"),(0,a.kt)("li",{parentName:"ul"},"normalize results in POJO rather than instances",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"This is only meaningful for those inspecting the rest hooks state directly"))),(0,a.kt)("li",{parentName:"ul"},"FlatEntity, SimpleRecord removed (use @rest-hooks/legacy)")),(0,a.kt)("h2",{id:"rest-hooksrest"},"@rest-hooks/rest"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"peerDep @rest-hooks/endpoint > 2")),(0,a.kt)("h2",{id:"rest-hookscore"},"@rest-hooks/core"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"buildInferredResult -> inferResults")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Error behavior"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"useError() will no longer create synthetic errors for missing entities")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("details",null,(0,a.kt)("summary",null,"useError() errorPolicy"),(0,a.kt)("h4",{parentName:"li",id:"endpointextraoptions"},"EndpointExtraOptions"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"interface EndpointExtraOptions {\n  //...rest\n  errorPolicy?: (error: any) => 'soft' | undefined;\n}\n")),(0,a.kt)("h4",{parentName:"li",id:"soft-vs-undefined"},"'soft' vs ",(0,a.kt)("inlineCode",{parentName:"h4"},"undefined")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"'soft' avoids errors if existing results are still available (even if stale)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"undefined")," (hard error) means any error always falls")),(0,a.kt)("h4",{parentName:"li",id:"rest-hooksrest-1"},"@rest-hooks/rest"),(0,a.kt)("p",{parentName:"li"},"New default policy: 5xx are soft, else hard."),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"@rest-hooks/rest")," is where errors have 'status' members. This concept does not exist in base Endpoints."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"  static getEndpointExtra(): EndpointExtraOptions | undefined {\n    return;\n    return {\n      errorPolicy: error =>\n        error.status >= 500 ? ('soft' as const) : undefined,\n    };\n  }\n")),(0,a.kt)("h4",{parentName:"li",id:"pollingsubscription"},"PollingSubscription"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"          // never break when data already exists\n          errorPolicy: () => 'soft' as const,\n")),(0,a.kt)("h4",{parentName:"li",id:"rest-hookslegacy---resource"},"@rest-hooks/legacy - Resource"),(0,a.kt)("p",{parentName:"li"},"Existing policy was to always be 'soft' no matter what. This maintains that behavior."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"  /** @deprecated */\n  /** Get the request options for this SimpleResource  */\n  static getFetchOptions(): FetchOptions | undefined {\n    return {\n      errorPolicy: () => 'soft' as const,\n    };\n  }\n")),(0,a.kt)("p",{parentName:"li"},(0,a.kt)("a",{parentName:"p",href:"https://github.com/coinbase/rest-hooks/pull/971"},"https://github.com/coinbase/rest-hooks/pull/971")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"polled fetch errors are always 'soft'")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"@rest-hooks/rest")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"5xx: 'soft'"),(0,a.kt)("li",{parentName:"ul"},"4xx, 3xx, etc: 'hard'"))))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"peerDep @rest-hooks/endpoint > 2"))),(0,a.kt)("h2",{id:"rest-hooks"},"rest-hooks"),(0,a.kt)("p",null,"Removed exports from 'rest-hooks': NestedEntity, schemas, isEntity, Entity, Resource, SimpleResource, SchemaDetail, SchemaList, Method"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"use @rest-hooks/legacy, or @rest-hooks/rest instead")),(0,a.kt)("h2",{id:"rest-hookslegacy"},"@rest-hooks/legacy"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"peerDep @rest-hooks/endpoint > 2")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/coinbase/rest-hooks/releases/tag/rest-hooks%406.0.0"},"Full Release notes")))}u.isMDXComponent=!0}}]);